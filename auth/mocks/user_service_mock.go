// Code generated by MockGen. DO NOT EDIT.
// Source: auth/auth_user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	auth "github.com/asstart/go-pseudo-passwordless/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthUser is a mock of AuthUser interface.
type MockAuthUser struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUserMockRecorder
}

// MockAuthUserMockRecorder is the mock recorder for MockAuthUser.
type MockAuthUserMockRecorder struct {
	mock *MockAuthUser
}

// NewMockAuthUser creates a new mock instance.
func NewMockAuthUser(ctrl *gomock.Controller) *MockAuthUser {
	mock := &MockAuthUser{ctrl: ctrl}
	mock.recorder = &MockAuthUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUser) EXPECT() *MockAuthUserMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockAuthUser) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockAuthUserMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockAuthUser)(nil).GetID))
}

// MockAuthUserService is a mock of AuthUserService interface.
type MockAuthUserService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUserServiceMockRecorder
}

// MockAuthUserServiceMockRecorder is the mock recorder for MockAuthUserService.
type MockAuthUserServiceMockRecorder struct {
	mock *MockAuthUserService
}

// NewMockAuthUserService creates a new mock instance.
func NewMockAuthUserService(ctrl *gomock.Controller) *MockAuthUserService {
	mock := &MockAuthUserService{ctrl: ctrl}
	mock.recorder = &MockAuthUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUserService) EXPECT() *MockAuthUserServiceMockRecorder {
	return m.recorder
}

// GetUserByKey mocks base method.
func (m *MockAuthUserService) GetUserByKey(key string) (auth.AuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByKey", key)
	ret0, _ := ret[0].(auth.AuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByKey indicates an expected call of GetUserByKey.
func (mr *MockAuthUserServiceMockRecorder) GetUserByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByKey", reflect.TypeOf((*MockAuthUserService)(nil).GetUserByKey), key)
}
